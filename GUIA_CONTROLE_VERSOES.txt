üöÄ GUIA DE CONTROLE DE VERS√ïES - PLATAFORMA BRAVO
================================================================

SE√á√ÉO CONSOLIDADA ‚Äì Vis√£o √önica e Padr√£o Operacional
----------------------------------------------------
Este documento consolida e padroniza as regras de versionamento, colabora√ß√£o e releases. Use-o como √∫nica fonte de verdade.

1) Estrutura de Branches
- `main`: produ√ß√£o est√°vel; push direto permitido para autorizados; PR recomendado para mudan√ßas grandes; backup autom√°tico a cada push (tags `backup/main/...`).
- `develop`: integra√ß√£o cont√≠nua; recebe PRs de features/fixes; push direto permitido para voc√™ e Malthus quando for algo pequeno e acordado.
- `feature/*` e `fix/*`: desenvolvimento de funcionalidades e corre√ß√µes; sempre abrir PR para `develop`.
- `hotfix/*`: corre√ß√µes cr√≠ticas originadas de `main`; ap√≥s merge em `main`, propagar para `develop`.

2) Estrat√©gia Padr√£o de Integra√ß√£o
- Durante o desenvolvimento (local): fa√ßa rebase da sua branch em `develop` para manter hist√≥rico linear e resolver conflitos cedo.
  - `git checkout develop && git pull origin develop`
  - `git checkout feature/sua-branch && git rebase develop`
  - Se reescrever commits: `git push --force-with-lease`
- PR de feature/fix ‚Üí develop: Squash and merge (no GitHub).
  - Benef√≠cios: 1 commit por feature; facilita rollback e leitura.
- PR de develop ‚Üí main (release): Create a merge commit.
  - Benef√≠cios: preserva conjunto de commits liberados para auditoria/changelog.
- Evitar ‚ÄúRebase and merge‚Äù em branches compartilhadas (`develop` e `main`).

3) Quando promover `develop` ‚Üí `main`
- Conjunto de features integrado e testado (homolog/QA) sem pend√™ncias cr√≠ticas.
- Migra√ß√µes aplicadas e validadas, com plano de rollback.
- CI verde e checklist de release conclu√≠do.

4) Nomenclatura de Branches (exemplos)
- `feat/frotas-<tema>` (Gest√£o de Frotas)
- `feat/almoxarifado-<tema>` (Almoxarifado)
- `feat/operacional-<tema>` (Gest√£o Operacional ‚Äì Malthus)
- `fix/<escopo>-<tema>` para corre√ß√µes
- `hotfix/<tema>` para emerg√™ncias em produ√ß√£o

5) Conven√ß√£o de Commits (Conventional Commits)
- Formato: `tipo(escopo): descri√ß√£o`
- Tipos: `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`
- Exemplos:
  - `feat(frotas): filtros por viatura e status cancelado`
  - `fix(almoxarifado): corrigir c√°lculo de saldo em movimenta√ß√µes`

6) Fluxos Padr√£o
- Nova feature:
  1. `git checkout develop && git pull`
  2. `git switch -c feature/<nome>`
  3. Desenvolver, `git add .`, `git commit -m "feat(...): ..."`
  4. `git push -u origin feature/<nome>`
  5. Abrir PR para `develop` (Squash and merge)
- Colabora√ß√£o simult√¢nea (Voc√™ e Malthus):
  - Rebase di√°rio das features em `develop`; reviews cruzados em PRs; comunica√ß√£o r√°pida via WhatsApp quando houver conflito.
- Hotfix urgente:
  1. `git checkout main && git switch -c hotfix/<tema>`
  2. Corrigir, commitar e mergear em `main`
  3. `git checkout develop && git merge hotfix/<tema>`
- Release:
  - PR `develop ‚Üí main` (Create a merge commit), tag da vers√£o, e merge back se usar branch `release/*`.

7) Processo de Pull Request (resumo)
- Base: `develop` para features; `main` nas releases.
- Checklist no PR:
  - [ ] Testado localmente
  - [ ] CI ok
  - [ ] Sem conflitos com `develop`
  - [ ] Commits seguem conven√ß√£o
  - [ ] Migra√ß√µes validadas (se houver)
- ‚ÄúComo testar‚Äù no PR: passos objetivos (ex.: filtros de checklist, cancelamento, etc.).

8) Rotina Di√°ria Recomendada
- Manh√£: `git checkout develop && git pull`, depois `git checkout feature/... && git rebase develop`
- Durante o dia: commits pequenos e push regular
- Antes do PR: rebase em `develop` atualizado, testes locais e documenta√ß√£o

9) Backup e Restaura√ß√£o da `main`
- A cada push na `main`, √© criada tag: `backup/main/<YYYYMMDD-HHMMSS>-<sha7>` (mantemos as √∫ltimas 20)
- Para restaurar via PR:
  1) `git fetch --tags`
  2) `git checkout -b restore/main-<timestamp> <tag-de-backup>`
  3) Validar localmente
  4) Abrir PR "restore: voltar main para <tag>"

10) Ferramentas e Comunica√ß√£o
- Git GUI: VS Code (GitLens), GitHub Desktop, Sourcetree
- Comunica√ß√£o: WhatsApp para urg√™ncias; GitHub (PRs/Issues) para decis√µes e review

Observa√ß√£o: Este guia substitui instru√ß√µes redundantes dos arquivos anteriores e consolida o fluxo recomendado (rebase local, squash em features, merge em releases).

üìã CONFIGURA√á√ÉO INICIAL
-----------------------
1. Criar branch de desenvolvimento:
   git checkout -b develop
   git push -u origin develop

2. Criar branch para Malthus (m√≥dulo operacional):
   git checkout -b feature/operacional-malthus
   git push -u origin feature/operacional-malthus

üå≥ ESTRUTURA DE BRANCHES
------------------------
‚Ä¢ main ‚Üí C√≥digo em produ√ß√£o (est√°vel)
‚Ä¢ develop ‚Üí Branch principal de desenvolvimento
‚Ä¢ feature/operacional-malthus ‚Üí Branch espec√≠fica do Malthus
‚Ä¢ hotfix/ ‚Üí Corre√ß√µes urgentes

‚ö° WORKFLOW DI√ÅRIO PARA MALTHUS
-------------------------------
1. Sempre come√ßar atualizando:
   git checkout feature/operacional-malthus
   git pull origin develop

2. Fazer commits frequentes:
   git add .
   git commit -m "feat(operacional): descri√ß√£o da mudan√ßa"

3. Push regular (2x por dia):
   git push origin feature/operacional-malthus

üìù CONVEN√á√ÉO DE COMMITS
-----------------------
‚Ä¢ feat(operacional): Nova funcionalidade
‚Ä¢ fix(operacional): Corre√ß√£o de bug
‚Ä¢ refactor(operacional): Refatora√ß√£o
‚Ä¢ style(operacional): Mudan√ßas de estilo
‚Ä¢ docs(operacional): Documenta√ß√£o

üîí PROTE√á√ÉO DE BRANCHES
-----------------------
‚Ä¢ main: Protegida (sem PR obrigat√≥rio). Push direto permitido para autorizados; PR recomendado para mudan√ßas grandes. Force-push e dele√ß√£o bloqueados. Backup autom√°tico a cada push (tags `backup/main/...`).
‚Ä¢ develop: Push direto permitido para voc√™ e Malthus. PRs opcionais para revis√µes.
‚Ä¢ feature/operacional-malthus: Push direto permitido

üîÑ PROCESSO DE INTEGRA√á√ÉO
-------------------------
1. Merge da develop na feature:
   git checkout feature/operacional-malthus
   git pull origin develop
   git merge develop

2. Resolver conflitos se houver
3. (Opcional) Criar Pull Request para develop
4. Alternativamente, push direto para develop quando apropriado

üíª COMANDOS ESSENCIAIS
----------------------
git status          ‚Üí Ver status
git diff            ‚Üí Ver diferen√ßas
git log --oneline   ‚Üí Hist√≥rico
git stash           ‚Üí Salvar trabalho tempor√°rio
git stash pop       ‚Üí Recuperar trabalho
git reset --soft HEAD~1 ‚Üí Desfazer √∫ltimo commit

üìÅ ARQUIVOS IGNORADOS (.gitignore)
----------------------------------
node_modules/
.env
.env.local
dist/
build/
*.log
.DS_Store

üõ†Ô∏è FERRAMENTAS RECOMENDADAS
----------------------------
‚Ä¢ VS Code + GitLens extension
‚Ä¢ GitHub Desktop (interface gr√°fica)
‚Ä¢ Sourcetree (alternativa gr√°fica)

‚ö†Ô∏è REGRAS IMPORTANTES
---------------------
‚úÖ Fazer push pelo menos 2x por dia
‚úÖ Sempre pull antes de come√ßar
‚úÖ Usar git stash antes de trocar branch
‚úÖ Commits descritivos e frequentes
‚úÖ Push direto na develop permitido (voc√™ e Malthus)
‚úÖ Push direto na main permitido para autorizados; prefira PR para mudan√ßas grandes
‚ùå N√£o fa√ßa force-push na main

üßØ BACKUP AUTOM√ÅTICO DA MAIN
----------------------------
‚Ä¢ A cada push na main, √© criada uma tag: backup/main/<YYYYMMDD-HHMMSS>-<sha7>
‚Ä¢ Mantemos apenas as √∫ltimas 20

Como ver as √∫ltimas tags (qualquer shell):
  git fetch --tags
  git tag -l "backup/main/*" --sort=-creatordate | head -n 10
No PowerShell:
  git tag -l "backup/main/*" --sort=-creatordate | Select-Object -First 10

Como restaurar com seguran√ßa (via PR):
  1) git fetch --tags
  2) git checkout -b restore/main-<timestamp> <tag-de-backup>
  3) Validar localmente
  4) Abrir PR "restore: voltar main para <tag>" e fazer merge

üì± PARA COMPARTILHAR NO WHATSAPP:
---------------------------------
Este guia est√° salvo em: GUIA_CONTROLE_VERSOES.txt
Pode ser copiado e colado no WhatsApp em partes ou
enviado como arquivo de texto.

================================================================
Plataforma Bravo v2 - Controle de Vers√µes
Data: $(Get-Date -Format 'dd/MM/yyyy')
================================================================