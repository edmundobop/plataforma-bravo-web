const { Client } = require('pg');

async function setupDatabase() {
  console.log('üîß Configurando banco de dados...');
  console.log('üí° Certifique-se que o PostgreSQL est√° rodando!');
  
  // Solicitar senha do postgres
  if (process.argv.length < 3) {
    console.log('\n‚ùì Como usar:');
    console.log('   node setup_database.js <senha_do_postgres>');
    console.log('\nüìù Exemplos:');
    console.log('   node setup_database.js postgres');
    console.log('   node setup_database.js admin123');
    console.log('   node setup_database.js 123456');
    console.log('\nüîç A senha √© a que voc√™ definiu durante a instala√ß√£o do PostgreSQL');
    process.exit(1);
  }

  const postgresPassword = process.argv[2];
  
  // Conectar como superusu√°rio postgres
  const adminClient = new Client({
    host: 'localhost',
    port: 5432,
    database: 'postgres',
    user: 'postgres',
    password: postgresPassword
  });

  try {
    console.log('üîå Testando conex√£o com PostgreSQL...');
    await adminClient.connect();
    console.log('‚úÖ Conectado ao PostgreSQL!');
    
    // Verificar se o banco j√° existe
    console.log('üîç Verificando banco cbmgo_db...');
    const dbExists = await adminClient.query(
      'SELECT 1 FROM pg_database WHERE datname = \'cbmgo_db\''
    );
    
    if (dbExists.rows.length === 0) {
      console.log('üóÑÔ∏è Criando banco cbmgo_db...');
      await adminClient.query('CREATE DATABASE cbmgo_db');
      console.log('‚úÖ Banco cbmgo_db criado!');
    } else {
      console.log('‚úÖ Banco cbmgo_db j√° existe!');
    }
    
    // Verificar se o usu√°rio j√° existe
    console.log('üîç Verificando usu√°rio cbmgo_user...');
    const userExists = await adminClient.query(
      'SELECT 1 FROM pg_roles WHERE rolname = \'cbmgo_user\''
    );
    
    if (userExists.rows.length === 0) {
      console.log('üë§ Criando usu√°rio cbmgo_user...');
      await adminClient.query(
        "CREATE USER cbmgo_user WITH PASSWORD 'cbmgo123'"
      );
      console.log('‚úÖ Usu√°rio cbmgo_user criado!');
    } else {
      console.log('‚úÖ Usu√°rio cbmgo_user j√° existe!');
      console.log('üîë Atualizando senha do usu√°rio cbmgo_user...');
      await adminClient.query(
        "ALTER USER cbmgo_user WITH PASSWORD 'cbmgo123'"
      );
      console.log('‚úÖ Senha do usu√°rio cbmgo_user atualizada!');
    }
    
    // Dar permiss√µes
    console.log('üîê Configurando permiss√µes...');
    await adminClient.query('GRANT ALL PRIVILEGES ON DATABASE cbmgo_db TO cbmgo_user');
    
    await adminClient.end();
    
    // Conectar ao banco cbmgo_db para configurar permiss√µes do schema
    const dbClient = new Client({
      host: 'localhost',
      port: 5432,
      database: 'cbmgo_db',
      user: 'postgres',
      password: postgresPassword
    });
    
    await dbClient.connect();
    await dbClient.query('GRANT ALL ON SCHEMA public TO cbmgo_user');
    await dbClient.query('GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO cbmgo_user');
    await dbClient.query('GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO cbmgo_user');
    await dbClient.query('ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO cbmgo_user');
    await dbClient.query('ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO cbmgo_user');

    // Transferir ownership das tabelas e sequ√™ncias existentes para cbmgo_user
    console.log('üßæ Ajustando ownership de objetos para cbmgo_user...');
    const tables = await dbClient.query(`
      SELECT table_name
      FROM information_schema.tables
      WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
    `);
    for (const row of tables.rows) {
      const tbl = row.table_name;
      try {
        await dbClient.query(`ALTER TABLE public."${tbl}" OWNER TO cbmgo_user`);
      } catch (e) {
        console.log(`   ‚ö†Ô∏è N√£o foi poss√≠vel alterar owner da tabela ${tbl}: ${e.message}`);
      }
    }

    const sequences = await dbClient.query(`
      SELECT sequence_name
      FROM information_schema.sequences
      WHERE sequence_schema = 'public'
    `);
    for (const row of sequences.rows) {
      const seq = row.sequence_name;
      try {
        await dbClient.query(`ALTER SEQUENCE public."${seq}" OWNER TO cbmgo_user`);
      } catch (e) {
        console.log(`   ‚ö†Ô∏è N√£o foi poss√≠vel alterar owner da sequ√™ncia ${seq}: ${e.message}`);
      }
    }
    await dbClient.end();
    
    console.log('\nüéâ Configura√ß√£o conclu√≠da com sucesso!');
    console.log('\nüìã Resumo da configura√ß√£o:');
    console.log('   üóÑÔ∏è Banco de dados: cbmgo_db');
    console.log('   üë§ Usu√°rio: cbmgo_user');
    console.log('   üîí Senha: cbmgo123');
    console.log('   üåê Host: localhost:5432');
    console.log('\nüöÄ Pr√≥ximos passos:');
    console.log('   1. Execute: node database/migrate.js');
    console.log('   2. Crie o usu√°rio admin (script ser√° fornecido)');
    console.log('   3. Acesse: http://localhost:3000');
    
  } catch (error) {
    console.error('\n‚ùå Erro na configura√ß√£o:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüîß Solu√ß√µes poss√≠veis:');
      console.log('   1. Verifique se o PostgreSQL est√° rodando');
      console.log('   2. Inicie o servi√ßo: services.msc ‚Üí PostgreSQL');
      console.log('   3. Ou reinicie o computador');
    } else if (error.code === '28P01') {
      console.log('\nüîë Problema de autentica√ß√£o:');
      console.log('   1. Verifique a senha do usu√°rio postgres');
      console.log('   2. Tente senhas comuns: postgres, admin, 123456');
      console.log('   3. Use o pgAdmin para redefinir a senha');
    } else {
      console.log('\nüí° Dicas gerais:');
      console.log('   1. Certifique-se que o PostgreSQL est√° instalado');
      console.log('   2. Verifique se a porta 5432 est√° dispon√≠vel');
      console.log('   3. Tente executar como administrador');
    }
    
    process.exit(1);
  }
}

setupDatabase();